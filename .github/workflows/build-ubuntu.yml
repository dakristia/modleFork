# Copyright (c) 2021 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu Builds

on:
  push:
    branches: [ main, devel, testing-ci ]
    paths:
      - ".github/workflows/build-ubuntu.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
  pull_request:
    branches: [ main, devel, testing-ci ]
    paths:
      - ".github/workflows/build-ubuntu.yml"
      - "cmake/**"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"


env:
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CONAN_V2_MODE: "1"
  CCACHE_BASEDIR: "${{ github.workspace }}/ccache-cache"
  CCACHE_COMPRESS: "false" # Let GHA cache do the compression
  CCACHE_MAXSIZE: "1G"
  R_HOME_USER: "${{ github.workspace }}/r-cache"
  PIP_CACHE_DIR: "${{ github.workspace }}/pip-cache"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - ubuntu:20.04
        compiler:
          - gcc-7.5
          - gcc-11.2
          - llvm-6.0.1
          - llvm-13.0.1
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        with_asan:
          - OFF
        warnings_as_errors:
          - OFF

        include:
          # Add an ASAN build for the latest GCC/Clang version
          - image: ubuntu:20.04
            compiler: gcc-11.2
            generator: "Ninja Multi-Config"
            build_type: Debug
            with_asan: ON
            warnings_as_errors: ON
          - image: ubuntu:20.04
            compiler: llvm-13.0.1
            generator: "Ninja Multi-Config"
            build_type: Debug
            with_asan: ON
            warnings_as_errors: ON

          # Make sure project builds when using make
          - image: ubuntu:20.04
            compiler: llvm-13.0.1
            generator: "Unix Makefiles"
            build_type: Debug
            with_asan: OFF
            warnings_as_errors: ON

    container:
      image: ${{matrix.image}}
      options: "--user=root -v ${{github.workspace}}:${{github.workspace}}"

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      # TODO make sure no step is referring to compiler-info variables

      - name: Generate Conan cache key
        id: conan_cache_key
        run: |
          host_os="host-${{ runner.os }}"
          image="${{ matrix.image }}"
          compiler="${{ matrix.compiler }}"
          generator="${{ matrix.generator }}"
          build_type="${{ matrix.build_type }}"
          hash="${{ hashFiles('conanfile.py') }}"

          echo "::set-output name=string::$host_os-$image-$compiler-$generator-$build_type-$hash"

      - name: Generate Ccache cache key
        id: ccache_cache_key
        run: |
          host_os="host-${{ runner.os }}"
          image="${{ matrix.image }}"
          compiler="${{ matrix.compiler }}"

          echo "::set-output name=string::$host_os-$image-$compiler"

      - name: Generate R cache key
        id: r_cache_key
        run: |
          host_os="host-${{ runner.os }}"
          image="${{ matrix.image }}"

          echo "::set-output name=string::$host_os-$image

      - name: Generate pip cache key
        id: pip_cache_key
        run: |
          host_os="host-${{ runner.os }}"
          image="${{ matrix.image }}"

          echo "::set-output name=string::$host_os-$image

      - name: Cache R home
        uses: actions/cache@v2
        with:
          key: r-home-${{}}
          path: ${{ env.R_HOME_USER }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          key: r-home-${{}}
          path: ${{ env.R_HOME_USER }}

      - name: Install unit test dependencies
        run: |
          # Make sure timezone information is properly set to avoid
          # interactive prompts when installing R
          ln -snf /usr/share/zoneinfo/CET /etc/localtime
          echo CET | tee /etc/timezone > /dev/null

          # Install Scipy and add-apt-repository
          apt-get update -q
          apt-get install -y -q --no-install-recommends curl          \
                                                     dirmngr          \
                                                     python3-scipy    \
                                                     software-properties-common

          curl -L 'https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc' |
            tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc > /dev/null
          add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"

          # Install a modern version of R as well as dependencies needed to build wCorr
          apt-get install -y -q --no-install-recommends r-base        \
                                                        r-base-dev    \
                                                        r-cran-minqa  \
                                                        r-cran-mnormt \
                                                        r-cran-rcpparmadillo

          # Enable parallel compilation for R packages
          echo "options(Ncpus = $(nproc))" | tee "$HOME/.Rprofile" > /dev/null

          # Install and test wCorr
          Rscript --no-save -e 'install.packages("wCorr", dependencies=c("Depends", "Imports", "LinkingTo"), repos="https://cloud.r-project.org")'
          Rscript --no-save -e 'quit(status=!library("wCorr", character.only=T, logical.return=T), save="no")' &> /dev/null

          R --version
          python3 --version

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          key: conan-${{ steps.conan_cache_key.outputs.string }}
          path: ${{ env.CONAN_USER_HOME }}

      - name: Cache Ccache folder
        uses: actions/cache@v2
        with:
          key: ccache-${{ steps.ccache_key.outputs.string }}
          path: ${{ env.CCACHE_BASEDIR }}

      - name: Install build dependencies
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
          conan: true
          ccache: true

      - name: Clean up Conan
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Create build directory
        working-directory: ${{ github.workspace }}
        run: mkdir build

      - name: Configure project
        working-directory: ${{ github.workspace }}/build
        run: |
          set -x

          waserr='OFF'
          wlto='OFF'

          if [[ ${{ steps.compiler-info.outputs.NAME }} == gcc ]] && \
             [[ ${{ matrix.config.build_type }} != 'Debug' ]]     && \
             [[ ${{ steps.compiler-info.outputs.VERSION_MAJOR }} -ge 9 ]] ; then
            waserr='ON'
            wlto='ON'
          fi

          if [[ ${{ steps.compiler-info.outputs.NAME }} == clang ]] && \
             [[ ${{ matrix.config.build_type }} != 'Debug' ]]     && \
             [[ ${{ steps.compiler-info.outputs.VERSION_MAJOR }} -ge 10 ]] ; then
            waserr='ON'
            # wlto='ON' # LTO seems to not be available with clang13-ubuntu16.04:1.41.0
          fi

          cmake -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} \
                -DENABLE_IPO=$wlto                               \
                -DENABLE_TESTING=ON                              \
                -DWARNINGS_AS_ERRORS=$waserr                     \
                /workspace

      - name: Build project
        working-directory: /workspace/build
        run: cmake --build . -j $(nproc)

      - name: Test project
        working-directory: /workspace/build
        run: |
          ctest --test-dir /workspace/build \
                --schedule-random           \
                --output-on-failure         \
                --no-tests=error            \
                --timeout 60                \
                --repeat after-timeout:3    \
                -j $(nproc)

      - name: Configure project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
             contains(steps.compiler-info.outputs.ID, 'clang-13'))
        env:
          CONAN_V2_MODE: "1"
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug      \
                -DENABLE_SANITIZER_ADDRESS=ON \
                -DENABLE_TESTING=ON           \
                -DWARNINGS_AS_ERRORS=ON       \
                /workspace

      - name: Build project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: cmake --build . -j $(nproc)

      - name: Test project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: |
          ctest --test-dir /workspace/build-asan \
                --schedule-random                \
                --output-on-failure              \
                --no-tests=error                 \
                -j $(nproc)

      - name: Configure project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        env:
          CONAN_V2_MODE: "1"
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug                 \
                -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON \
                -DENABLE_TESTING=ON                      \
                -DWARNINGS_AS_ERRORS=ON                  \
                /workspace

      - name: Build project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: cmake --build . -j $(nproc)

      - name: Test project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: |
          ctest --test-dir /workspace/build-ubsan \
                --schedule-random                 \
                --output-on-failure               \
                --no-tests=error                  \
                -j $(nproc)

      - name: Print Ccache statistics
        run: ccache -sv
