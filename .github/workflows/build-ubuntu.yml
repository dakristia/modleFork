# Copyright (c) 2021 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu Builds

on:
  push:
    branches: [ main, testing-ci, v4.1 ]
    paths:
      - ".github/workflows/*.yml"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
  pull_request:
    branches: [ main, testing-ci, v4.1 ]
    paths:
      - ".github/workflows/*.yml"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        image:
          - conanio/gcc7-ubuntu16.04:1.41.0
          - conanio/gcc11-ubuntu16.04:1.41.0
          - conanio/clang60:latest
          - conanio/clang13-ubuntu16.04:1.41.0
        config:
          - build_type: Release
          - build_type: Debug

    runs-on: ubuntu-latest
    container:
      image: ${{matrix.image}}
      options: "--user=root -v ${{github.workspace}}:/workspace"
    env:
      CONAN_USER_HOME: "/workspace"
      R_VERSION: "4.1.1"
      R_BUILD_DIR: "/workspace/r-build"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Collect compiler information
        id: compiler-info
        run: |
          compiler_name="$(basename "$(readlink -f "$(which cc)")" | grep -o "gcc\|clang")"
          compiler_ver="$(cc -dumpversion)"
          compiler_id="${compiler_name}-${compiler_ver}"
          
          echo "::set-output name=NAME::$compiler_name"
          echo "::set-output name=VERSION::$compiler_ver"
          echo "::set-output name=VERSION_MAJOR::$(echo $compiler_ver | grep -oP '^\d+')"
          echo "::set-output name=ID::$compiler_id"

      - name: Generate Conan cache key
        id: conan_cache_key
        run: |
          host_os="host-${{ runner.os }}"
          compiler_id="${{ steps.compiler-info.outputs.ID }}"
          build_type="${{ matrix.config.build_type }}"
          hash="${{ hashFiles('conanfile.py') }}"

          echo "::set-output name=string::$host_os-$compiler_id-$build_type-$hash"

      - name: Cache R
        uses: actions/cache@v2
        with:
          key: host-${{ runner.os }}-${{ steps.compiler-info.outputs.ID }}-R-${{ env.R_VERSION }}
          path: |
            /workspace/R-${R_VERSION}.tar.gz
            /workspace/r-build
            /workspace/R/${R_VERSION}

      - name: Install unit test dependencies
        run: |
          pip3 install scipy
          
          sudo -i
          apt-get update
          apt-get install -y gcc g++ gfortran libblas-dev libcurl4-openssl-dev \
                             liblapack-dev libpcre2-dev libssl-dev libxml2-dev
          
          export PATH="$PATH:/workspace/R/${R_VERSION}/bin"
          echo "/workspace/R/${R_VERSION}/bin" >> $GITHUB_PATH
          
          if ! [ -x "$(command -v Rscript)" ]; then
            mkdir -p /workspace/r-build
            cd /workspace/r-build
            curl -LOC - "https://cran.rstudio.com/src/base/R-4/R-${R_VERSION}.tar.gz"
            tar -xf "R-${R_VERSION}.tar.gz"
            cd R-${R_VERSION}
            ./configure --prefix=/workspace/R/${R_VERSION} \
                        --enable-memory-profiling          \
                        --enable-R-shlib                   \
                        --with-blas                        \
                        --with-lapack                      \
                        --with-x=no
            make -j $(nproc)
            make install
            
            
            sudo ln -snf /usr/share/zoneinfo/CET /etc/localtime
            echo CET | tee /etc/timezone > /dev/null
            
            echo "options(Ncpus = $(nproc))" | sudo tee "$HOME/.Rprofile" > /dev/null
            Rscript --no-save -e 'install.packages("wCorr", dependencies=c("Depends", "Imports", "LinkingTo"), repos="https://cloud.r-project.org")'
            Rscript --no-save -e 'quit(status=!library("wCorr", character.only=T, logical.return=T), save="no")' &> /dev/null
          fi

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          key: conan-${{ steps.conan_cache_key.outputs.string }}
          path: ${{ env.CONAN_USER_HOME }}/.conan/data

      - name: Clean up Conan
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Create build directories
        working-directory: /workspace
        run: mkdir build build-asan build-ubsan

      - name: Configure project
        working-directory: /workspace/build
        env:
          CONAN_V2_MODE: "1"
        run: |
          set -x
          
          waserr='OFF'
          wlto='OFF'

          if [[ ${{ steps.compiler-info.outputs.NAME }} == gcc ]] && \
             [[ ${{ matrix.config.build_type }} != 'Debug' ]]     && \
             [[ ${{ steps.compiler-info.outputs.VERSION_MAJOR }} -ge 9 ]] ; then
            waserr='ON'
            wlto='ON'
          fi
          
          if [[ ${{ steps.compiler-info.outputs.NAME }} == clang ]] && \
             [[ ${{ matrix.config.build_type }} != 'Debug' ]]     && \
             [[ ${{ steps.compiler-info.outputs.VERSION_MAJOR }} -ge 10 ]] ; then
            waserr='ON'
            # wlto='ON' # LTO seems to not be available with clang13-ubuntu16.04:1.41.0
          fi
          
          cmake -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} \
                -DENABLE_IPO=$wlto                               \
                -DENABLE_TESTING=ON                              \
                -DWARNINGS_AS_ERRORS=$waserr                     \
                /workspace

      - name: Build project
        working-directory: /workspace/build
        run: cmake --build . -j $(nproc)

      - name: Test project
        working-directory: /workspace/build
        run: |
          ctest --test-dir /workspace/build \
                --schedule-random           \
                --output-on-failure         \
                --no-tests=error            \
                -j $(nproc)

      - name: Configure project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
             contains(steps.compiler-info.outputs.ID, 'clang-13'))
        env:
          CONAN_V2_MODE: "1"
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug      \
                -DENABLE_SANITIZER_ADDRESS=ON \
                -DENABLE_TESTING=ON           \
                -DWARNINGS_AS_ERRORS=ON       \
                /workspace

      - name: Build project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: cmake --build . -j $(nproc)

      - name: Test project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: |
          ctest --test-dir /workspace/build-asan \
                --schedule-random                \
                --output-on-failure              \
                --no-tests=error                 \
                -j $(nproc)

      - name: Configure project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        env:
          CONAN_V2_MODE: "1"
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug                 \
                -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON \
                -DENABLE_TESTING=ON                      \
                -DWARNINGS_AS_ERRORS=ON                  \
                /workspace

      - name: Build project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: cmake --build . -j $(nproc)

      - name: Test project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (contains(steps.compiler-info.outputs.ID, 'gcc-11') ||
              contains(steps.compiler-info.outputs.ID, 'clang-13'))
        run: |
          ctest --test-dir /workspace/build-ubsan \
                --schedule-random                 \
                --output-on-failure               \
                --no-tests=error                  \
                -j $(nproc)
