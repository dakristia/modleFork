# Copyright (c) 2021 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu Builds

on:
  push:
    branches: [ main, testing-ci, v4, v4.1 ]
    paths:
      - ".github/workflows/*.yml"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
  pull_request:
    branches: [ main, testing-ci, v4, v4.1 ]
    paths:
      - ".github/workflows/*.yml"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
          - ubuntu-20.04
        compiler:
          - cc: gcc
            cxx: g++
          - cc: clang
            cxx: clang++
        config:
          - build_type: Release
          - build_type: Debug
            sanitizer: ADDRESS
          - build_type: Debug
            sanitizer: UNDEFINED_BEHAVIOR

    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          key: >
            host-${{matrix.os}}-
            target-${{matrix.os}}-
            ${{matrix.compiler.cc}}-
            ${{matrix.config.build_type}}-
            ${{hashFiles('conanfile.py')}}

          path: ~/.conan/data

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install unit test dependencies
        run: pip3 install scipy

      - name: Clean up Conan
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Conan version
        run: echo ${{steps.conan.outputs.version}}

      - name: Make build directory
        working-directory: ${{runner.workspace}}
        run: mkdir build

      - name: Configure project - Release
        working-directory: ${{runner.workspace}}/build
        if: ${{matrix.config.build_type != 'Debug'}}
        env:
          CONAN_V2_MODE: "1"
        run: |
          waserr='ON'; wlto='ON';     \
          if [[ ${{matrix.os}} == 'ubuntu-18.04' ]]; then \
            waserr='OFF'; wlto='OFF'; \
          fi; \
          cmake -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} \
                -DCMAKE_C_COMPILER=${{matrix.compiler.cc}}       \
                -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}    \
                -DENABLE_IPO=$wlto                               \
                -DENABLE_TESTING=ON                              \
                -DWARNINGS_AS_ERRORS=$waserr                     \
                ${{github.workspace}}

      - name: Configure project - Debug
        working-directory: ${{runner.workspace}}/build
        if: ${{matrix.config.build_type == 'Debug'}}
        env:
          CONAN_V2_MODE: "1"
        run: |
          waserr='ON'; wlto='ON';     \
          if [[ ${{matrix.os}} == 'ubuntu-18.04' ]]; then \
            waserr='OFF'; wlto='OFF'; \
          fi; \
          cmake -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}}   \
                -DENABLE_SANITIZER_${{matrix.config.sanitizer}}=ON \
                -DCMAKE_C_COMPILER=${{matrix.compiler.cc}}         \
                -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}      \
                -DENABLE_IPO=$wlto                                 \
                -DENABLE_TESTING=ON                                \
                -DWARNINGS_AS_ERRORS=$waserr                       \
                ${{github.workspace}}

      - name: Build project
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . -j $(nproc)

      - name: Test project
        working-directory: ${{github.workspace}}
        run: |
          ctest --test-dir ${{runner.workspace}}/build \
                --schedule-random                      \
                --output-on-failure                    \
                -j $(nproc)
