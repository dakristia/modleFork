# Copyright (c) 2021 Roberto Rossini (roberros@uio.no)
# SPDX-License-Identifier: MIT

name: Ubuntu Builds

on:
  push:
    branches: [ main, testing-ci, v4.1 ]
    paths:
      - ".github/workflows/*.yml"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"
  pull_request:
    branches: [ main, testing-ci, v4.1 ]
    paths:
      - ".github/workflows/*.yml"
      - "external/**"
      - "src/**"
      - "test/**"
      - "CMakeLists.txt"
      - "conanfile.py"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        image:
          - conanio/gcc7-ubuntu16.04:1.41.0
          - conanio/gcc11-ubuntu16.04:1.41.0
          - conanio/clang60:latest
          - conanio/clang13-ubuntu16.04:1.41.0
        config:
          - build_type: Release
          - build_type: Debug

    runs-on: ubuntu-latest
    container:
      image: ${{matrix.image}}
      options: "--user=root -v ${{github.workspace}}:/workspace"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install unit test dependencies
        run: pip3 install scipy

      - name: Generate cache key
        id: conan_cache_key
        run: |
          host_os="host-${{runner.os}}"
          compiler_id="$(basename "$CC")-$(cc -dumpversion)"
          build_type="${{matrix.config.build_type}}"
          hash="${{hashFiles('conanfile.py')}}"

          echo "::set-output name=string::$host_os-$compiler_id-$build_type-$hash"

      - name: Cache Conan packages
        uses: actions/cache@v2
        with:
          key: conan-${{ steps.conan_cache_key.outputs.string }}
          path: ~/.conan/data

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo ${{steps.conan.outputs.version}}

      - name: Clean up Conan
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs

      - name: Create build directories
        working-directory: /workspace
        run: mkdir build build-asan build-ubsan

      - name: Configure project
        working-directory: /workspace/build
        env:
          CONAN_V2_MODE: "1"
        run: |
          waserr='OFF'
          wlto='OFF'

          compiler="$(basename "$CC")-$(cc -dumpversion)"
          if [[ "$compiler_id" == gcc-11* ]] || [[ "$compiler_id" == clang-13* ]] ; then
            waserr='ON'
            wlto='ON'
          fi

          cmake -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} \
                -DENABLE_IPO=$wlto                               \
                -DENABLE_TESTING=ON                              \
                -DWARNINGS_AS_ERRORS=$waserr                     \
                /workspace

      - name: Build project
        working-directory: /workspace/build
        run: cmake --build . -j $(nproc)

      - name: Test project
        working-directory: /workspace/build
        run: |
          ctest --test-dir /workspace/build \
                --schedule-random           \
                --output-on-failure         \
                --no-tests=error            \
                -j $(nproc)

      - name: Configure project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (matrix.image == 'conanio/gcc11-ubuntu16.04:1.41.0' ||
              matrix.image == 'conanio/clang13-ubuntu16.04:1.41.0')
        env:
          CONAN_V2_MODE: "1"
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug      \
                -DENABLE_SANITIZER_ADDRESS=ON \
                -DENABLE_TESTING=ON           \
                -DWARNINGS_AS_ERRORS=ON       \
                /workspace

      - name: Build project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (matrix.image == 'conanio/gcc11-ubuntu16.04:1.41.0' ||
              matrix.image == 'conanio/clang13-ubuntu16.04:1.41.0')
        run: cmake --build . -j $(nproc)

      - name: Test project - ASAN
        working-directory: /workspace/build-asan
        if: >
          matrix.config.build_type == 'Debug' &&
             (matrix.image == 'conanio/gcc11-ubuntu16.04:1.41.0' ||
              matrix.image == 'conanio/clang13-ubuntu16.04:1.41.0')
        run: |
          ctest --test-dir /workspace/build-asan \
                --schedule-random                \
                --output-on-failure              \
                --no-tests=error                 \
                -j $(nproc)

      - name: Configure project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (matrix.image == 'conanio/gcc11-ubuntu16.04:1.41.0' ||
              matrix.image == 'conanio/clang13-ubuntu16.04:1.41.0')
        env:
          CONAN_V2_MODE: "1"
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug                 \
                -DENABLE_SANITIZER_UNDEFINED_BEHAVIOR=ON \
                -DENABLE_TESTING=ON                      \
                -DWARNINGS_AS_ERRORS=ON                  \
                /workspace

      - name: Build project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (matrix.image == 'conanio/gcc11-ubuntu16.04:1.41.0' ||
              matrix.image == 'conanio/clang13-ubuntu16.04:1.41.0')
        run: cmake --build . -j $(nproc)

      - name: Test project - UBSAN
        working-directory: /workspace/build-ubsan
        if: >
          matrix.config.build_type == 'Debug' &&
             (matrix.image == 'conanio/gcc11-ubuntu16.04:1.41.0' ||
              matrix.image == 'conanio/clang13-ubuntu16.04:1.41.0')
        run: |
          ctest --test-dir /workspace/build-ubsan \
                --schedule-random                 \
                --output-on-failure               \
                --no-tests=error                  \
                -j $(nproc)
